{"version":3,"file":"DashboardGeneral-tIsp33gk.js","sources":["../../src/views/dashboard/DashboardGeneral.vue"],"sourcesContent":["<template>\n  <div class=\"row dashboardView\">\n    <DashboardCard title=\"Messages per day\">\n      <TimeSlide :data=\"allMessages\" />\n    </DashboardCard>\n    <!-- <div class=\"col-12\">\n      <q-card>\n        <q-card-section>\n          <h4>Messages over time</h4>\n        </q-card-section>\n      </q-card>\n    </div> -->\n\n    <DashboardCard\n      title=\"Filter how many times words are used\"\n      subtitle=\"Fill in words to see how often they are used\"\n    >\n      <q-select\n        filled\n        v-model=\"filterWords\"\n        multiple\n        use-chips\n        hide-dropdown-icon\n        use-input\n        new-value-mode=\"add\"\n        label=\"Multiple selection\"\n      />\n      <div class=\"row\">\n        <MessageWithWord\n          class=\"col-12\"\n          :data=\"data\"\n          :filter-words=\"filterWords\"\n        />\n      </div>\n    </DashboardCard>\n\n    <DashboardCard\n      is-small\n      title=\"Emoji's used total\"\n    >\n      <EmojiTable :data=\"messagesContainingEmoji\" />\n    </DashboardCard>\n\n    <DashboardCard\n      is-small\n      title=\"Emoji's used per person\"\n    >\n      <EmojiTablePerPerson\n        :data=\"messagesContainingEmoji\"\n        class=\"col-6\"\n      />\n    </DashboardCard>\n\n    <DashboardCard\n      is-small\n      title=\"Attachments sent\"\n    >\n      <AttachmentsChart :data=\"messagesContainginAttachments\" />\n    </DashboardCard>\n\n    <DashboardCard\n      is-small\n      title=\"Message length total\"\n    >\n      <TextLengthChart :data=\"data\" />\n    </DashboardCard>\n\n    <DashboardCard\n      is-small\n      v-if=\"isGroupChat\"\n      title=\"Group events\"\n    >\n      <EventsTable :data=\"events\" />\n    </DashboardCard>\n\n    <DashboardCard\n      is-small\n      v-if=\"isGroupChat\"\n      title=\"Group name changes\"\n    >\n      <GroupNameChangesTable :data=\"events\" />\n    </DashboardCard>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch } from 'vue'\nimport MessageWithWord from '../../components/MessageWithWord.vue'\nimport EmojiTable from '../../components/EmojiTable.vue'\nimport EmojiTablePerPerson from '../../components/EmojiTablePerPerson.vue'\nimport AttachmentsChart from '../../components/AttachmentsChart.vue'\nimport TimeSlide from '../../components/TimeSlide.vue'\nimport TextLengthChart from '../../components/TextLengthChart.vue'\nimport EventsTable from '../../components/EventsTable.vue'\nimport GroupNameChangesTable from '../../components/GroupNameChangesTable.vue'\nimport { useStore } from '../../store'\nimport { SummaryItem } from '../../utils/types'\nimport DashboardCard from '@/components/dashboard/DashboardCard.vue'\n\nconst store = useStore()\nconst filterWords = ref(['the'])\nconst data = computed(() => store.authorsDataMessages)\nconst allMessages = computed(() => store.messagesPerAuthor)\nconst messagesContainingEmoji = computed(() => store.messagesContainingEmoji)\nconst messagesContainginAttachments = computed(() => store.messagesContainginAttachments)\nconst events = computed(() => store.eventsData)\nconst totalDays = computed(() => store.totalDays)\nconst isGroupChat = computed(() => store.isGroupChat)\n\nconst handleSummary = computed(() => summaryItemsHandler())\nconsole.log(handleSummary)\n\nwatch(\n  store.filterDate,\n  () => {\n    summaryItemsHandler()\n  },\n  { immediate: true }\n)\n\nfunction summaryItemsHandler() {\n  const totalMessagesSent = computed(() => allMessages.value.map((author) => author.messages.length).reduce((acc, curr) => acc + curr, 0))\n  const messagesPerAuthor = computed(() => allMessages.value.map((author) => ({ name: author.name, messages: author.messages.length })).sort((a, b) => b.messages - a.messages))\n\n  const emojiCount = computed(() => {\n    const emojiCount = messagesContainingEmoji.value\n      .flatMap((participant) => participant.messages)\n      .flatMap((item) => item.emojis)\n      ?.reduce(function (acc: Record<string, number>, curr) {\n        return acc[curr || ''] ? ++acc[curr || ''] : (acc[curr || ''] = 1), acc\n      }, {})\n\n    const toSort = Object.entries(emojiCount || {}).sort((a, b) => b[1] - a[1])\n    return toSort.splice(0, 4).map(([emoji, count]) => ({ emoji, count }))\n  })\n\n  const messagesPerAuthorTimed = computed(() => messagesPerAuthor.value.map((author) => ({ name: author.name, messages: author.messages / totalDays.value })))\n\n  const summaryItems = computed<SummaryItem[]>(() => [\n    {\n      title: 'Total messages sent',\n      value: totalMessagesSent.value,\n      icon: 'message',\n      subtitle: `Daily average ${(totalMessagesSent.value / totalDays.value).toFixed(2)} messages`,\n      class: '',\n      showValue: !!totalMessagesSent.value,\n    },\n    {\n      title: 'Most messages sent',\n      value: messagesPerAuthorTimed.value[0].name,\n      subtitle: `Daily average ${messagesPerAuthorTimed.value[0].messages.toFixed(2)} messages`,\n      icon: 'keyboard',\n      class: '',\n      showValue: !!messagesPerAuthorTimed.value[0].messages,\n    },\n    {\n      title: 'Most used emoji',\n      value: emojiCount.value[0]?.emoji || 'No emoji used',\n      subtitle: `Daily average ${(emojiCount.value[0]?.count / totalDays.value).toFixed(2)} times used`,\n      icon: 'mood',\n      class: 'isEmoji',\n      showValue: !!emojiCount.value[0]?.count,\n    },\n  ])\n\n  store.setSummaryItems(summaryItems.value)\n  return { summaryItems }\n}\n</script>\n"],"names":["store","useStore","filterWords","ref","data","computed","allMessages","messagesContainingEmoji","messagesContainginAttachments","events","totalDays","isGroupChat","handleSummary","summaryItemsHandler","watch","totalMessagesSent","author","acc","curr","messagesPerAuthor","a","b","emojiCount","_a","participant","item","emoji","count","messagesPerAuthorTimed","summaryItems","_b","_c"],"mappings":"knBAmGA,MAAMA,EAAQC,IACRC,EAAcC,EAAI,CAAC,KAAK,CAAC,EACzBC,EAAOC,EAAS,IAAML,EAAM,mBAAmB,EAC/CM,EAAcD,EAAS,IAAML,EAAM,iBAAiB,EACpDO,EAA0BF,EAAS,IAAML,EAAM,uBAAuB,EACtEQ,EAAgCH,EAAS,IAAML,EAAM,6BAA6B,EAClFS,EAASJ,EAAS,IAAML,EAAM,UAAU,EACxCU,EAAYL,EAAS,IAAML,EAAM,SAAS,EAC1CW,EAAcN,EAAS,IAAML,EAAM,WAAW,EAE9CY,EAAgBP,EAAS,IAAMQ,EAAqB,CAAA,EAC1D,QAAQ,IAAID,CAAa,EAEzBE,EACEd,EAAM,WACN,IAAM,CACgBa,GACtB,EACA,CAAE,UAAW,EAAK,CAAA,EAGpB,SAASA,GAAsB,CAC7B,MAAME,EAAoBV,EAAS,IAAMC,EAAY,MAAM,IAAKU,GAAWA,EAAO,SAAS,MAAM,EAAE,OAAO,CAACC,EAAKC,IAASD,EAAMC,EAAM,CAAC,CAAC,EACjIC,EAAoBd,EAAS,IAAMC,EAAY,MAAM,IAAKU,IAAY,CAAE,KAAMA,EAAO,KAAM,SAAUA,EAAO,SAAS,MAAA,EAAS,EAAE,KAAK,CAACI,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,CAAC,EAEvKE,EAAajB,EAAS,IAAM,OAChC,MAAMiB,GAAaC,EAAAhB,EAAwB,MACxC,QAASiB,GAAgBA,EAAY,QAAQ,EAC7C,QAASC,GAASA,EAAK,MAAM,IAFb,YAAAF,EAGf,OAAO,SAAUN,EAA6BC,EAAM,CACpD,OAAOD,EAAIC,GAAQ,EAAE,EAAI,EAAED,EAAIC,GAAQ,EAAE,EAAKD,EAAIC,GAAQ,EAAE,EAAI,EAAID,CACtE,EAAG,CAAE,GAGP,OADe,OAAO,QAAQK,GAAc,CAAA,CAAE,EAAE,KAAK,CAACF,EAAGC,IAAMA,EAAE,CAAC,EAAID,EAAE,CAAC,CAAC,EAC5D,OAAO,EAAG,CAAC,EAAE,IAAI,CAAC,CAACM,EAAOC,CAAK,KAAO,CAAE,MAAAD,EAAO,MAAAC,GAAQ,CAAA,CACtE,EAEKC,EAAyBvB,EAAS,IAAMc,EAAkB,MAAM,IAAKH,IAAY,CAAE,KAAMA,EAAO,KAAM,SAAUA,EAAO,SAAWN,EAAU,KAAA,EAAQ,CAAC,EAErJmB,EAAexB,EAAwB,IAAM,WAAA,OACjD,CACE,MAAO,sBACP,MAAOU,EAAkB,MACzB,KAAM,UACN,SAAU,kBAAkBA,EAAkB,MAAQL,EAAU,OAAO,QAAQ,CAAC,CAAC,YACjF,MAAO,GACP,UAAW,CAAC,CAACK,EAAkB,KACjC,EACA,CACE,MAAO,qBACP,MAAOa,EAAuB,MAAM,CAAC,EAAE,KACvC,SAAU,iBAAiBA,EAAuB,MAAM,CAAC,EAAE,SAAS,QAAQ,CAAC,CAAC,YAC9E,KAAM,WACN,MAAO,GACP,UAAW,CAAC,CAACA,EAAuB,MAAM,CAAC,EAAE,QAC/C,EACA,CACE,MAAO,kBACP,QAAOL,EAAAD,EAAW,MAAM,CAAC,IAAlB,YAAAC,EAAqB,QAAS,gBACrC,SAAU,oBAAkBO,EAAAR,EAAW,MAAM,CAAC,IAAlB,YAAAQ,EAAqB,OAAQpB,EAAU,OAAO,QAAQ,CAAC,CAAC,cACpF,KAAM,OACN,MAAO,UACP,UAAW,CAAC,GAACqB,EAAAT,EAAW,MAAM,CAAC,IAAlB,MAAAS,EAAqB,MACpC,CAAA,EACD,EAEK,OAAA/B,EAAA,gBAAgB6B,EAAa,KAAK,EACjC,CAAE,aAAAA,CAAa,CACxB"}