{"version":3,"file":"EmojiTablePerPerson.vue_vue_type_script_setup_true_lang-u4-UhWhZ.js","sources":["../../node_modules/quasar/src/components/table/QTd.js","../../src/components/EmojiTable.vue","../../src/utils/emojiTable.ts","../../src/components/EmojiTablePerPerson.vue"],"sourcesContent":["import { h, computed, getCurrentInstance } from 'vue'\n\nimport { createComponent } from '../../utils/private/create.js'\nimport { hSlot } from '../../utils/private/render.js'\n\nexport default createComponent({\n  name: 'QTd',\n\n  props: {\n    props: Object,\n    autoWidth: Boolean,\n    noHover: Boolean\n  },\n\n  setup (props, { slots }) {\n    const vm = getCurrentInstance()\n    const classes = computed(() =>\n      'q-td' + (props.autoWidth === true ? ' q-table--col-auto-width' : '')\n      + (props.noHover === true ? ' q-td--no-hover' : '')\n      + ' '\n    )\n\n    return () => {\n      if (props.props === void 0) {\n        return h('td', { class: classes.value }, hSlot(slots.default))\n      }\n\n      const name = vm.vnode.key\n      const col = (\n        (props.props.colsMap !== void 0 ? props.props.colsMap[ name ] : null)\n        || props.props.col\n      )\n\n      if (col === void 0) { return }\n\n      const { row } = props.props\n\n      return h('td', {\n        class: classes.value + col.__tdClass(row),\n        style: col.__tdStyle(row)\n      }, hSlot(slots.default))\n    }\n  }\n})\n","<template>\n  <div class=\"container\">\n    <q-table\n      ref=\"dataTable\"\n      class=\"emojiTable\"\n      outlined\n      :rows=\"rows\"\n      :columns=\"columns\"\n      :pagination=\"{ rowsPerPage: 10 }\"\n      flat\n    >\n      <template #body-cell-emoji=\"slotProps\">\n        <q-td>\n          <div class=\"isEmoji\">\n            {{ slotProps.row.emoji }}\n          </div>\n        </q-td>\n      </template>\n    </q-table>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { Author } from '../utils/types.ts'\nimport type { PropType } from 'vue'\nimport { ref, onMounted, computed } from 'vue'\nimport { QTableColumn } from 'quasar'\n\nconst props = defineProps({\n  data: {\n    type: Object as PropType<Author[]>,\n    required: true,\n  },\n})\n\nconst dataTable = ref()\nconst columns: QTableColumn[] = [\n  {\n    name: 'emoji',\n    label: 'Emoji',\n    field: 'emoji',\n    align: 'left',\n  },\n  { name: 'value', align: 'left', label: 'Aantal', field: 'value', sortable: true },\n]\n\nconst rows = computed(() => {\n  const emojiCount: Record<string, number> = props.data\n    .flatMap((participant) => participant.messages)\n    .flatMap((item) => item.emojis)\n    ?.reduce(function (acc: Record<string, number>, curr) {\n      // if (!curr) return acc;\n      // TODO: CHECK\n      // console.log(acc)\n\n      // console.log(curr)\n      return acc[curr || ''] ? ++acc[curr || ''] : (acc[curr || ''] = 1), acc\n    }, {})\n\n  const rows = []\n\n  for (const key of Object.entries(emojiCount)) {\n    rows.push({\n      emoji: key[0],\n      value: key[1],\n    })\n  }\n\n  return rows\n})\n\nonMounted(() => {\n  // Hacky way to ensure it sorts DSC, first one triggers ASC\n  dataTable.value.sort('value')\n  dataTable.value.sort('value')\n})\n</script>\n\n<style scoped></style>\n","import { QTableColumn } from 'quasar'\n\nexport function countOccurrences(array: string[]) {\n  if (!array || !array.length) return {}\n  return array.reduce(function (acc: Record<string, number>, curr: string) {\n    return acc[curr] ? ++acc[curr] : (acc[curr] = 1), acc\n  }, {})\n}\n\nexport const EMOJI_TABLE_ROWS: QTableColumn[] = [\n  {\n    name: 'emoji',\n    label: 'Emoji',\n    field: 'emoji',\n    align: 'left',\n  },\n  {\n    name: 'author',\n    label: 'Door wie',\n    field: 'author',\n    align: 'left',\n  },\n  { name: 'value', align: 'right', label: 'Aantal', field: 'value', sortable: true },\n]\n\nexport const EMOJI_BASIC_TABLE_ROWS: QTableColumn[] = [\n  {\n    name: 'name',\n    label: 'Emoji',\n    field: 'name',\n    align: 'left',\n  },\n\n  { name: 'value', align: 'left', label: 'Aantal', field: 'value', sortable: true },\n]\n","<template>\n  <div class=\"container\">\n    <q-table\n      class=\"emojiTable\"\n      ref=\"dataTable\"\n      outlined\n      :rows=\"rows\"\n      :columns=\"columns\"\n      :pagination=\"{ rowsPerPage: 10 }\"\n      flat\n    >\n      <template #body-cell-emoji=\"slotProps\">\n        <q-td>\n          <div class=\"isEmoji\">\n            {{ slotProps.row.emoji }}\n          </div>\n        </q-td>\n      </template>\n    </q-table>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { Author } from '../utils/types.ts'\nimport type { PropType } from 'vue'\nimport { computed, ref, onMounted } from 'vue'\nimport { countOccurrences, EMOJI_TABLE_ROWS } from '../utils/emojiTable'\n\nconst props = defineProps({\n  data: {\n    type: Object as PropType<Author[]>,\n    required: true,\n  },\n})\n\ninterface EmojiTableRow {\n  emoji: string\n  value: number\n  author: string\n}\nconst dataTable = ref()\nconst columns = EMOJI_TABLE_ROWS\n\nconst rows = computed<EmojiTableRow[]>(() => {\n  const rows: EmojiTableRow[] = []\n\n  props.data.map((participant) => {\n    const allEmojis = participant.messages.flatMap((item) => item.emojis)\n\n    const emojiCount: Record<string, number> = countOccurrences(allEmojis)\n\n    for (const key of Object.entries(emojiCount)) {\n      rows.push({\n        emoji: key[0],\n        author: participant.name,\n        value: key[1],\n      })\n    }\n  })\n\n  return rows\n})\n\nonMounted(() => {\n  // Hacky way to ensure it sorts DSC, first one triggers ASC\n  dataTable.value.sort('value')\n  dataTable.value.sort('value')\n})\n</script>\n"],"names":["QTd","createComponent","props","slots","vm","getCurrentInstance","classes","computed","h","hSlot","name","col","row","__props","dataTable","ref","columns","rows","emojiCount","_a","participant","item","acc","curr","key","onMounted","countOccurrences","array","EMOJI_TABLE_ROWS","allEmojis"],"mappings":"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","x_google_ignoreList":[0]}