{"version":3,"file":"EmojiTablePerPerson.vue_vue_type_script_setup_true_lang-fVZ3HaaU.js","sources":["../../node_modules/quasar/src/components/table/QTd.js","../../src/components/EmojiTable.vue","../../src/utils/emojiTable.ts","../../src/components/EmojiTablePerPerson.vue"],"sourcesContent":["import { h, computed, getCurrentInstance } from 'vue'\n\nimport { createComponent } from '../../utils/private/create.js'\nimport { hSlot } from '../../utils/private/render.js'\n\nexport default createComponent({\n  name: 'QTd',\n\n  props: {\n    props: Object,\n    autoWidth: Boolean,\n    noHover: Boolean\n  },\n\n  setup (props, { slots }) {\n    const vm = getCurrentInstance()\n    const classes = computed(() =>\n      'q-td' + (props.autoWidth === true ? ' q-table--col-auto-width' : '')\n      + (props.noHover === true ? ' q-td--no-hover' : '')\n      + ' '\n    )\n\n    return () => {\n      if (props.props === void 0) {\n        return h('td', { class: classes.value }, hSlot(slots.default))\n      }\n\n      const name = vm.vnode.key\n      const col = (\n        (props.props.colsMap !== void 0 ? props.props.colsMap[ name ] : null)\n        || props.props.col\n      )\n\n      if (col === void 0) { return }\n\n      const { row } = props.props\n\n      return h('td', {\n        class: classes.value + col.__tdClass(row),\n        style: col.__tdStyle(row)\n      }, hSlot(slots.default))\n    }\n  }\n})\n","<template>\r\n  <div class=\"container\">\r\n    <q-table\r\n      ref=\"dataTable\"\r\n      class=\"emojiTable\"\r\n      outlined\r\n      :rows=\"rows\"\r\n      :columns=\"columns\"\r\n      :pagination=\"{ rowsPerPage: 10 }\"\r\n      flat\r\n    >\r\n      <template #body-cell-emoji=\"slotProps\">\r\n        <q-td>\r\n          <div class=\"isEmoji\">\r\n            {{ slotProps.row.emoji }}\r\n          </div>\r\n        </q-td>\r\n      </template>\r\n    </q-table>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { Author } from '../utils/types.ts'\r\nimport type { PropType } from 'vue'\r\nimport { ref, onMounted, computed } from 'vue'\r\nimport { QTableColumn } from 'quasar'\r\n\r\nconst props = defineProps({\r\n  data: {\r\n    type: Object as PropType<Author[]>,\r\n    required: true,\r\n  },\r\n})\r\n\r\nconst dataTable = ref()\r\nconst columns: QTableColumn[] = [\r\n  {\r\n    name: 'emoji',\r\n    label: 'Emoji',\r\n    field: 'emoji',\r\n    align: 'left',\r\n  },\r\n  { name: 'value', align: 'left', label: 'Amount', field: 'value', sortable: true },\r\n]\r\n\r\nconst rows = computed(() => {\r\n  const emojiCount: Record<string, number> = props.data\r\n    .flatMap((participant) => participant.messages)\r\n    .flatMap((item) => item.emojis)\r\n    ?.reduce(function (acc: Record<string, number>, curr) {\r\n      // if (!curr) return acc;\r\n      // TODO: CHECK\r\n      // console.log(acc)\r\n\r\n      // console.log(curr)\r\n      return acc[curr || ''] ? ++acc[curr || ''] : (acc[curr || ''] = 1), acc\r\n    }, {})\r\n\r\n  const rows = []\r\n\r\n  for (const key of Object.entries(emojiCount)) {\r\n    rows.push({\r\n      emoji: key[0],\r\n      value: key[1],\r\n    })\r\n  }\r\n\r\n  return rows\r\n})\r\n\r\nonMounted(() => {\r\n  // Hacky way to ensure it sorts DSC, first one triggers ASC\r\n  dataTable.value.sort('value')\r\n  dataTable.value.sort('value')\r\n})\r\n</script>\r\n\r\n<style scoped></style>\r\n","import { QTableColumn } from 'quasar'\r\n\r\nexport function countOccurrences(array: string[]) {\r\n  if (!array || !array.length) return {}\r\n  return array.reduce(function (acc: Record<string, number>, curr: string) {\r\n    return acc[curr] ? ++acc[curr] : (acc[curr] = 1), acc\r\n  }, {})\r\n}\r\n\r\nexport const EMOJI_TABLE_ROWS: QTableColumn[] = [\r\n  {\r\n    name: 'emoji',\r\n    label: 'Emoji',\r\n    field: 'emoji',\r\n    align: 'left',\r\n  },\r\n  {\r\n    name: 'author',\r\n    label: 'Sent by',\r\n    field: 'author',\r\n    align: 'left',\r\n  },\r\n  { name: 'value', align: 'right', label: 'Amount', field: 'value', sortable: true },\r\n]\r\n\r\nexport const EMOJI_BASIC_TABLE_ROWS: QTableColumn[] = [\r\n  {\r\n    name: 'name',\r\n    label: 'Emoji',\r\n    field: 'name',\r\n    align: 'left',\r\n  },\r\n\r\n  { name: 'value', align: 'left', label: 'Amount', field: 'value', sortable: true },\r\n]\r\n","<template>\r\n  <div class=\"container\">\r\n    <q-table\r\n      class=\"emojiTable\"\r\n      ref=\"dataTable\"\r\n      outlined\r\n      :rows=\"rows\"\r\n      :columns=\"columns\"\r\n      :pagination=\"{ rowsPerPage: 10 }\"\r\n      flat\r\n    >\r\n      <template #body-cell-emoji=\"slotProps\">\r\n        <q-td>\r\n          <div class=\"isEmoji\">\r\n            {{ slotProps.row.emoji }}\r\n          </div>\r\n        </q-td>\r\n      </template>\r\n    </q-table>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { Author } from '../utils/types.ts'\r\nimport type { PropType } from 'vue'\r\nimport { computed, ref, onMounted } from 'vue'\r\nimport { countOccurrences, EMOJI_TABLE_ROWS } from '../utils/emojiTable'\r\n\r\nconst props = defineProps({\r\n  data: {\r\n    type: Object as PropType<Author[]>,\r\n    required: true,\r\n  },\r\n})\r\n\r\ninterface EmojiTableRow {\r\n  emoji: string\r\n  value: number\r\n  author: string\r\n}\r\nconst dataTable = ref()\r\nconst columns = EMOJI_TABLE_ROWS\r\n\r\nconst rows = computed<EmojiTableRow[]>(() => {\r\n  const rows: EmojiTableRow[] = []\r\n\r\n  props.data.map((participant) => {\r\n    const allEmojis = participant.messages.flatMap((item) => item.emojis)\r\n\r\n    const emojiCount: Record<string, number> = countOccurrences(allEmojis)\r\n\r\n    for (const key of Object.entries(emojiCount)) {\r\n      rows.push({\r\n        emoji: key[0],\r\n        author: participant.name,\r\n        value: key[1],\r\n      })\r\n    }\r\n  })\r\n\r\n  return rows\r\n})\r\n\r\nonMounted(() => {\r\n  // Hacky way to ensure it sorts DSC, first one triggers ASC\r\n  dataTable.value.sort('value')\r\n  dataTable.value.sort('value')\r\n})\r\n</script>\r\n"],"names":["QTd","createComponent","props","slots","vm","getCurrentInstance","classes","computed","h","hSlot","name","col","row","__props","dataTable","ref","columns","rows","emojiCount","_a","participant","item","acc","curr","key","onMounted","countOccurrences","array","EMOJI_TABLE_ROWS","allEmojis"],"mappings":"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","x_google_ignoreList":[0]}